using Google.Protobuf;
using Google.Protobuf.TFramework;
using Google.Protobuf.WellKnownTypes;
using ProtoBuf;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TFramework.Singleton;
using TFramework.Utils;
using static Google.Protobuf.CodedOutputStream;

namespace TFramework.Protobuf
{
    public class SocketManager : AutoGeneratedSingleton<SocketManager>
    {
        private Dictionary<NetworkEnum, IMessage> msgIdDict = new Dictionary<NetworkEnum, IMessage>()
        {
            {NetworkEnum.MSG_LOGIN, new Login()},
            {NetworkEnum.MSG_USER_INFO, new UserInfo()}
        };

        private MemoryStream outStream = new MemoryStream();


        public void SendProtobufMsg(uint msgID, IMessage msg)
        {
            outStream.Seek(0, SeekOrigin.Begin);
            byte[] ids = BitConverter.GetBytes(msgID);
            outStream.Write(ids, 0, ids.Length);
            outStream.Seek(ids.Length, SeekOrigin.Begin);
            msg.WriteTo(outStream);
        }

        public void RecvProtobufMsg(byte[] bytes, out uint msgID)
        {
            msgID = BitConverter.ToUInt32(bytes, 0);
            if (msgIdDict.TryGetValue((NetworkEnum)msgID, out IMessage msg))
            {
                msg.MergeFrom(bytes, 4, bytes.Length);
                // 将对象抛出去
            }
            else
            {
                Console.WriteLine($"没有MsgID:{msgID}");
            }
        }

    }
}
